<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
   <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"
    />
    <title><%- title %></title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/ant-design-vue@1.6.0/dist/antd.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/aplayer@1.10.0/dist/APlayer.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://momentjs.com/downloads/moment.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ant-design-vue@1.6.0/dist/antd.min.js"></script>
    <script async src="https://cdn.jsdelivr.net/npm/aplayer@1.10.0/dist/APlayer.min.js"></script>
    <link rel="stylesheet" href="/css/DPlayer.min.css" />
    <script async src="/js/DPlayer.min.js"></script>
    <style>
      #app {
        min-height: 100vh;
        min-width: 100vw;
      }
      #components-layout-demo-basic {
        text-align: center;
      }
      .ant-layout-has-sider {
        height: calc(100vh - 64px);
      }
      #components-layout-demo-basic .ant-layout-header,
      #components-layout-demo-basic .ant-layout-footer {
        background: #7dbcea;
        color: #fff;
      }
      #components-layout-demo-basic .ant-layout-footer {
        line-height: 1.5;
      }
      #components-layout-demo-basic .ant-layout-sider {
        background: #3ba0e9;
        color: #fff;
        line-height: 120px;
      }
      #components-layout-demo-basic .ant-layout-content {
        background: rgba(16, 142, 233, 1);
        color: #fff;
        min-height: 120px;
        line-height: 120px;
      }
      #components-layout-demo-basic > .ant-layout {
        margin-bottom: 48px;
      }
      #components-layout-demo-basic > .ant-layout:last-child {
        margin: 0;
      }
      .my-sider {
        max-width: 0px !important;
        min-width: 0px !important;
        flex: 0 0 0px !important;
      }
      .spin-content {
        border: 1px solid #91d5ff;
        background-color: rgba(230, 247, 255, 0.8);
        padding: 30px;
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        top: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 999;
      }
      .ant-spin-dot {
        margin-right: 10px;
      }
      #dplayer {
        width: 100%;
        height: 100%;
      }
      .cover {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: end;
      }
      .cover img {
        margin: auto;
        max-width: 80%;
        max-height: 80vh;
      }
      .audioBox {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
      }
      .default {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
      }
      .continear {
        border-radius: 10px;
        background: rgba(0, 0, 0, 0.5);
        padding: 50px;
      }
      .continear img {
        display: block;
        width: 100px;
        margin: 10px auto;
      }
      .continear .bottom button:hover {
        background: rgb(67, 164, 255);
      }
      .continear .bottom button {
        display: block;
        cursor: pointer;
        color: white;
        width: 100%;
        margin: 0;
        line-height: 30px;
        border-radius: 5px;
        outline: none;
        background: #1890ff;
        border: none;
        transition: all 0.2s;
      }
      .title {
        text-align: center;
        color: white;
        max-width: 300px;
      }
      .ant-tree-node-content-wrapper:before {
        width: 100vw;
      }
       .autoWidth {
          max-width: 30vw !important;
          min-width: 30vw !important;
          flex: 0 0 30vw !important;
        }
      @media screen and (max-width: 500px) {
        .autoWidth {
          max-width: 100vw !important;
          min-width: 100vw !important;
          flex: 0 0 100vw !important;
        }
      }
    </style>
  </head>
  <body>
    <div id="app">
        <a-modal
      title="获取链接"
      :visible="visible"
      centered
      :footer="null"
      @cancel="close"
      :mask="false"
    >
      <a-textarea v-model="copys" autoSize />
    </a-modal>
      <a-spin tip="Loading..." class="spin-content" v-show="spinning"> </a-spin>
        <a-layout-header
            style="white-space: nowrap; background: transparent; padding: 0; padding-left: 15px; background-image: linear-gradient(to right,#12c2e9 0,#c471ed 50%,#f64f59 100%);"
          >
            <a-button
              :icon="collapsed ? 'menu-unfold' : 'menu-fold'"
              type="primary"
              @click="onCollapse"
            >
            </a-button>
            <a-tooltip title="获取链接" placement="topLeft" arrow-point-at-center >
              <a-button
              :disabled="!checkedKeys.length"
              icon="copy"
              type="primary"
              @click="downLoads"
              style="margin-left: 20px;"
            >
              
            </a-button>
            </a-tooltip>
            <a-tooltip placement="topLeft" arrow-point-at-center title="取消选择" >
            <a-button
              :disabled="!checkedKeys.length"
              icon="delete"
              type="danger"
              @click="() => {checkedKeys = []}"
            >
              
            </a-button>
            </a-tooltip>
          </a-layout-header>
      <a-layout>
        <a-layout-sider
          theme="light"
          :class="{'my-sider': collapsed,'autoWidth': !collapsed}"
          width="40vw"
          v-model="collapsed"
          :trigger="null"
          collapsible
          style="overflow: auto;"
        >
          <a-directory-tree
            checkable
            v-model="checkedKeys"
            v-show="toggleTree"
            @select="onSelect"
            :load-data="onLoadData"
            :tree-data="treeData"
            style="padding-bottom: 8px;"
            @dblclick="ondbclick"
             @check='check'
          >
          </a-directory-tree>
        </a-layout-sider>
        <a-layout>
          </a-layout-header>
          <a-layout-content
            style="background: url('/img/cool-background.svg'); background-size: cover;"
          >
            <div class="audioBox" v-show="audio">
              <div id="aplayer"></div>
            </div>
            <div id="dplayer" v-show="video"> </div>
            <div class="cover" v-show="img">
              <img :src="img" />
            </div>
            <div class="default" v-show="MyDefault">
              <div class="continear" v-if="MyDefault">
                <img src="/img/zip.png" />
                <div class="bottom">
                  <h2 class="title">{{ this.MyDefault.title }}</h2>
                  <button @click="down">下载</button>
                </div>
              </div>
            </div>
          </a-layout-content>
        </a-layout>
      </a-layout>
    </div>
    <script>
      Vue.use(antd)
      new Vue({
        el: '#app',
        data: {
          spinning: false,
          treeData: [
            { title: '<%- data.fileName%>', key: '<%- data.id%>', type: '<%- data.fileType%>' ,isLeaf: <%= data.fileType !== 'folder' ? true : false %>, disableCheckbox: <%= data.fileType === 'folder' ? true : false %>}
          ],
          checkedKeys: [],
          checkedName:[],
          currents: null,
          video: null,
          img: null,
          currentKey: null,
          audio: null,
          MyDefault: null,
          toggleTree: true,
          collapsed: false,
          visible: false,
          copys: ''
        },
        // watch: {
        //   checkedKeys (val, old) {
        //     console.log(val, old);
        //   }
        // },
        methods: {
          check(arg1, node) {
            this.checkedName = node.checkedNodes.map(item => item.data.props.title)
          },
          close () {
            this.visible = false
          },
          downLoads () {
            let res = this.checkedKeys.map((item,i) =>{
              return `${this.checkedName[i]}:\n${window.location.host}/downShare/${this.treeData[0].key}/${item}?flag=1\n\n`
            })
            this.copys = res.join('')
            this.visible = true
          },
         async onCollapse () {
           this.toggleTree = !this.toggleTree
           this.collapsed = !this.collapsed
         },
         async down () {
          let url = await this.getDownloadUrl(this.treeData[0].key,this.MyDefault.key)
          window.open(url[0]['downloadUrl'])
         },
        async ondbclick (event, item) {
            if (item.dataRef.type === 'folder' || item.dataRef.type === 'page') return
            window.open((await this.getDownloadUrl(this.treeData[0].key, item.dataRef.key))[0]['downloadUrl'])
          },
          async onSelect(keys, event) {
            let current = event.node.dataRef
            if (this.currentKey === current.key || current.type === 'folder' ) return
            this.currentKey = current.key
            this.video = false
            this.img = false
            this.audio = false
            this.spinning = true
            switch (current.type) {
              case 'page':
                try {
                  this.currents = await (
                    await fetch(`?getlist=1&fileId=${current.fileId}&page=${current.key}`)
                  ).json()
                } catch (error) {
                  this.$message.error({ content: error.toString() })
                  this.spinning = false
                }
                current.parent.children.pop()
                current.parent.children = [
                  ...current.parent.children,
                  ...this.formatList(this.currents.data)
                ]
                let recordCount = this.currents.recordCount,
                  max = Math.ceil(recordCount / 100)
                if (max !== this.currents.pageNum) {
                  current.parent.children.push({
                    title: '下一页',
                    key: current.key + 1,
                    type: 'page',
                    isLeaf: true,
                    fileId: current.fileId,
                    parent: current.parent
                  })
                }
                this.treeData = [...this.treeData]
                this.spinning = false
                break
              case 'mp4':
                this.video = true
                this.$nextTick(async () => {
                  let key = current.key
                  let url = await this.getDownloadUrl(this.treeData[0].key, key)
                  new DPlayer({
                    container: document.getElementById('dplayer'),
                    video: {
                      url: url[0]['downloadUrl'],
                      type: 'auto',
                    }
                  })
                  this.spinning = false
                })
                break
              case 'png':
                let url1 = await this.getDownloadUrl(this.treeData[0].key,current.key)
                this.img = url1[0]['imageInfo'].icon.largeUrl
                this.spinning = false
                break
              case 'jpg':

                let url2 = await this.getDownloadUrl(this.treeData[0].key,current.key)
                this.img = url2[0]['downloadUrl']
                this.spinning = false
                break
              case 'gif':

                let url3 = await this.getDownloadUrl(this.treeData[0].key,current.key)
                this.img = url3[0]['downloadUrl']
                this.spinning = false
                break
              case 'mp3':

                this.audio = true
                this.$nextTick(async () => {
                  let key2 = current.key
                  let url2 = await this.getDownloadUrl(this.treeData[0].key, key2)
                  new APlayer({
                      container: document.getElementById('aplayer'),
                      audio: [{
                          name: url2[0].fileName,
                          url: url2[0].downloadUrl,
                          artist: url2[0].audioInfo.artist,
                          cover: url2[0].audioInfo.icon.largeUrl,
                          preload:false,
                          autoplay:false
                      }]
                  })
                  this.spinning = false
                })

                break
              default:
                this.MyDefault = current
                this.spinning = false
            }
          },
          async getDownloadUrl (parent,fileId) {
           try {
             let res = await( await fetch(`/downShare/${parent}/${fileId}`) ).json()
             if (res.code && res.code !== 200) throw new Error(res.msg)
              return  res

           } catch (error) {
              this.$message.error({ content: error.toString() })
           }
          },
          formatList(list) {
            return list.map(item => {
            size = item.fileSize && !item.isFolder ? "\xa0\xa0\xa0"+this.formatFileSize(item.fileSize) : ''
              return {
                title: item.fileName + size,
                key: item.fileId,
                type: item.isFolder ?  'folder' : item.fileType,
                isLeaf: !item.isFolder ? true : false,
                disableCheckbox: item.isFolder ?  true : false
              }
            })
          },
          formatFileSize(num) {
              if (null == num || num == "") {
                return "0 Bytes";
              }
              var unitArr = new Array(
                "Bytes",
                "KB",
                "MB",
                "GB",
                "TB",
                "PB",
                "EB",
                "ZB",
                "YB"
              );
              var index = 0;
              var srcsize = parseFloat(num);
              index = Math.floor(Math.log(srcsize) / Math.log(1024));
              var size = srcsize / Math.pow(1024, index);
              size = size.toFixed(2); //保留的小数位数
              return size + unitArr[index];
            },
          onLoadData(treeNode) {
            this.spinning = true
            return new Promise(async resolve => {
              if (
                treeNode.dataRef.children ||
                treeNode.dataRef.type !== 'folder' ||
                treeNode.dataRef.type === 'page'
              ) {
                resolve()
                this.spinning = false
                return
              }

              try {
                this.currents = await (
                  await fetch(`?getlist=1&fileId=${treeNode.dataRef.key}&page=${1}`)
                ).json()
                if (this.currents.code === 500) {
                  this.spinning = false
                  throw new Error('获取失败,原因可能是账户状态失效')
                }
              } catch (error) {
                this.$message.error({ content: error.toString() })
              }
              treeNode.dataRef.children = this.formatList(this.currents.data)
              let recordCount = this.currents.recordCount,
                max = Math.ceil(recordCount / 100)
              if (max !== 0 && max !== this.currents.pageNum) {
                treeNode.dataRef.children.push({
                  title: '下一页',
                  key: 2,
                  type: 'page',
                  isLeaf: true,
                  fileId: treeNode.dataRef.key,
                  parent: treeNode.dataRef
                })
              }
              this.treeData = [...this.treeData]
              resolve()
              this.spinning = false
            })
          }
        }
      })
    </script>
  </body>
</html>
